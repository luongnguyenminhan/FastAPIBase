"""
FastAPI Main Application Entry Point

This file serves as the main entry point for the FastAPI application.
It contains:
- Application initialization and configuration
- CORS middleware setup
- Global exception handlers
- Health check endpoints
- Database connection test endpoints
- API router inclusion for different versions

Dependencies:
- FastAPI framework
- SQLAlchemy for database operations
- Various internal modules from app package

Author: Minh An
Last Modified: 23 Jun 2024
Version: 2.0.0
"""

from fastapi import FastAPI, Depends, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from app.core.config import API_V1_STR, API_V2_STR, PROJECT_NAME
from app.controllers.v1 import api_router as api_v1_router
from app.controllers.v2 import api_router as api_v2_router
from app.db.base import get_db
from sqlalchemy.orm import Session
from sqlalchemy import text
from typing import Dict
from app.schemas.common import ErrorResponseModel, BaseResponseModel, ResponseStatus

description = """
üöÄ T√†i Li·ªáu API

## T√≠nh NƒÉng
* Qu·∫£n L√Ω Ng∆∞·ªùi D√πng
* Qu·∫£n L√Ω M·ª•c
* C√°c Ph√©p To√°n
"""

app = FastAPI(
    title=PROJECT_NAME,
    description=description,
    version="2.0.0",
    terms_of_service="http://example.com/terms/",
    contact={
        "name": "H·ªó Tr·ª£ API",
        "url": "http://example.com/support",
        "email": "support@example.com",
    },
    license_info={
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html",
    },
)

# C·∫•u h√¨nh CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.on_event("startup")
async def startup_event():
    """
    X·ª≠ l√Ω c√°c t√°c v·ª• kh·ªüi ƒë·ªông ·ª©ng d·ª•ng

    Ch·ª©c nƒÉng:
    - Kh·ªüi t·∫°o k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
    - Thi·∫øt l·∫≠p b·ªô nh·ªõ ƒë·ªám n·∫øu c·∫ßn
    - Kh·ªüi t·∫°o c√°c d·ªãch v·ª• b√™n ngo√†i

    Raises:
        Exception: Ghi log c√°c l·ªói x·∫£y ra trong qu√° tr√¨nh kh·ªüi ƒë·ªông
    """
    try:
        # B·∫°n c√≥ th·ªÉ kh·ªüi t·∫°o t√†i nguy√™n ·ªü ƒë√¢y
        pass
    except Exception as e:
        print(f"L·ªói kh·ªüi ƒë·ªông: {e}")


@app.on_event("shutdown")
async def shutdown_event():
    """
    X·ª≠ l√Ω c√°c t√°c v·ª• khi t·∫Øt ·ª©ng d·ª•ng

    Ch·ª©c nƒÉng:
    - ƒê√≥ng k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
    - Gi·∫£i ph√≥ng t√†i nguy√™n
    - L∆∞u tr·∫°ng th√°i n·∫øu c·∫ßn

    Raises:
        Exception: Ghi log c√°c l·ªói x·∫£y ra trong qu√° tr√¨nh t·∫Øt
    """
    try:
        # B·∫°n c√≥ th·ªÉ d·ªçn d·∫πp t√†i nguy√™n ·ªü ƒë√¢y
        pass
    except Exception as e:
        print(f"L·ªói khi t·∫Øt: {e}")


@app.get("/health", response_model=BaseResponseModel[Dict[str, str]])
async def health_check():
    """
    Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa API

    Returns:
        Dict[str, str]: T·ª´ ƒëi·ªÉn ch·ª©a tr·∫°ng th√°i v√† phi√™n b·∫£n API
            - status: Tr·∫°ng th√°i ho·∫°t ƒë·ªông hi·ªán t·∫°i
            - version: S·ªë phi√™n b·∫£n API

    Example:
        Response: {"status": "ho·∫°t ƒë·ªông", "version": "2.0.0"}
    """
    return {
        "status": ResponseStatus.SUCCESS,
        "message": "Health check completed successfully",
        "data": {
            "status": "ho·∫°t ƒë·ªông",
            "version": "2.0.0"
        }
    }


@app.get("/test-db", response_model=BaseResponseModel[Dict[str, str]])
async def test_db(db: Session = Depends(get_db)):
    """
    Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu

    Args:
        db (Session): Phi√™n l√†m vi·ªác v·ªõi c∆° s·ªü d·ªØ li·ªáu, ƒë∆∞·ª£c inject t·ª± ƒë·ªông

    Returns:
        dict: K·∫øt qu·∫£ ki·ªÉm tra k·∫øt n·ªëi
            - status: Tr·∫°ng th√°i k·∫øt n·ªëi
            - message: Th√¥ng b√°o chi ti·∫øt
            - result: K·∫øt qu·∫£ truy v·∫•n test

    Raises:
        HTTPException: Khi kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu
    """
    try:
        result = db.execute(text("SELECT 1 as test"))
        return {
            "status": ResponseStatus.SUCCESS,
            "message": "Database connection test completed successfully",
            "data": {
                "status": "th√†nh c√¥ng",
                "message": "K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng",
                "result": result.first()[0]
            }
        }
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu th·∫•t b·∫°i: {str(e)}"
        )


# X·ª≠ l√Ω ngo·∫°i l·ªá
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """
    X·ª≠ l√Ω c√°c ngo·∫°i l·ªá HTTP

    Args:
        request: Request g√¢y ra ngo·∫°i l·ªá
        exc: ƒê·ªëi t∆∞·ª£ng ngo·∫°i l·ªá HTTP

    Returns:
        JSONResponse: Ph·∫£n h·ªìi JSON ch·ª©a th√¥ng tin l·ªói
    """
    return JSONResponse(
        status_code=exc.status_code,
        content=ErrorResponseModel(
            status=ResponseStatus.ERROR,
            error_code=f"HTTP_{exc.status_code}",
            message=exc.detail
        ).dict()
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """
    X·ª≠ l√Ω c√°c ngo·∫°i l·ªá chung

    Args:
        request: Request g√¢y ra ngo·∫°i l·ªá
        exc: ƒê·ªëi t∆∞·ª£ng ngo·∫°i l·ªá

    Returns:
        JSONResponse: Ph·∫£n h·ªìi JSON ch·ª©a th√¥ng b√°o l·ªói chung
    """
    return JSONResponse(
        status_code=500,
        content=ErrorResponseModel(
            status=ResponseStatus.ERROR,
            error_code="INTERNAL_SERVER_ERROR",
            message="L·ªói m√°y ch·ªß n·ªôi b·ªô"
        ).dict()
    )


# Bao g·ªìm c√°c controller routers
app.include_router(
    api_v1_router,
    prefix=API_V1_STR,
    tags=["API v1"]
)
app.include_router(
    api_v2_router,
    prefix=API_V2_STR,
    tags=["API v2"]
)
